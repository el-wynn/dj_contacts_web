// src/components/SpotifyPlaylistProcessor.tsx
'use client';
import { useState } from 'react';

export default function SpotifyPlaylistProcessor() {
  const [playlistUrl, setPlaylistUrl] = useState('');
  const [artists, setArtists] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isError, setIsError] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      const response = await fetch('/api/spotify/playlist', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ playlistUrl })
      });
        
      const data = await response.json();
      if (response.ok) {
        setIsError(false);
        setArtists(data.artists.join(', '));
      } else {
        let errorMessage: string;        
        switch (response.status) {
          case 400 :
            errorMessage = "This doesn't look like a Spotify playlist URL. Please make sure it looks like open.spotify.com/playlist/azerty123456WXCVBN or spotify:playlist:azerty123456WXCVBN"
            break;
          case 401 :
            errorMessage = "Log in to Spotify first."
            break;
          case 404 : 
            errorMessage = "I couldn't find any tracks here. Also, I cannot process playlist generated by Spotify themselves, sorry."
            break;
          default :
            errorMessage = "I couldn't process this playlist. Please try with another one."
        }
        setArtists(errorMessage);
        console.log(data.error + " " + response.status || 'Failed to process playlist');
        setIsError(true);
      }
    } catch (error) {
      console.log('Network error occurred');
      setArtists("I cannot process this playlist for now.")
      setIsError(true);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-4">
      <label htmlFor="playlist-input" className="block text-gray-700 text-sm font-bold mb-2">
          Enter Spotify playlist URL:
      </label>
      <form onSubmit={handleSubmit} className="flex gap-2">
        <input
          type="text"
          id="playlist-input"
          value={playlistUrl}
          onChange={(e) => setPlaylistUrl(e.target.value)}
          placeholder="open.spotify.com/playlist/azerty123456WXCVBN or spotify:playlist:azerty123456WXCVBN"
          className="shadow appearance-none border rounded flex-1 p-2 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          required
        />
        <button 
          type="submit" 
          disabled={isLoading}
          className="px-4 py-2 bg-green-500 text-white rounded disabled:opacity-50"
        >
          {isLoading ? 'Processing...' : 'Get Artists'}
        </button>
      </form>
      
      <textarea
        value={artists}
        readOnly
        className="w-full p-2 border rounded min-h-24"
        placeholder="Artists will appear here..."
      />
    </div>
  );
}